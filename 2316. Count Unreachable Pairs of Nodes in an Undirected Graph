// 01 --> best time based approach

class Solution {
public:
    vector<int> dis;

    int findd(int i) {
        return dis[i] < 0 ? i : dis[i] = findd(dis[i]);
    }

    void unionn(int i, int j) {
        i = findd(i), j = findd(j);
        if (i == j) return;
        if (dis[i] < dis[j]) dis[i] += dis[j], dis[j] = i;
        else dis[j] += dis[i], dis[i] = j;
    }

    long long countPairs(int n, vector<vector<int>>& edges) {
        long long ans = 0;
        dis.resize(n, -1);
        for (auto &e : edges) unionn(e[0], e[1]);
        for (int i = 0; i < n; i++) ans += n + dis[findd(i)];

        return ans / 2;
    }
};


//02 --> MY approach 
class Solution {
public:
    void dfs(vector<int>g[],vector<bool>&vis,int node,long long &num_nodes){
        
     vis[node]=true;

    for(auto x:g[node]){
       if(vis[x]==false){
           num_nodes++;
         dfs(g,vis,x,num_nodes);
         }
       }
    }

    long long countPairs(int n, vector<vector<int>>& edges) {
        
        vector<bool>vis(n,false);
        vector<int>g[n+1];
        long long res=0;
        for(auto p:edges){
            cout<<p[0]<<"   "<<p[1]<<endl;
        }
        for(auto x:edges){
            g[x[0]].push_back(x[1]);
            g[x[1]].push_back(x[0]);
        }
        
        for(int i=0;i<n;i++){
            if(vis[i] == false){
                long long num_nodes=1;
                dfs(g,vis,i,num_nodes);
                int not_conn_nodes=n-num_nodes;
                res+=(num_nodes*not_conn_nodes);
            }
                
        }
        return res/2;   
    }
};
