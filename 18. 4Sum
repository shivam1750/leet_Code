class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        set<vector<int>> s;
        vector<vector<int>> output;
        for(int i=0; i<n-3; i++){
            for(int j=i+1; j<n-2; j++){
                for(int k=j+1; k<n-1; k++){
                    for(int l=k+1; l<n; l++){
                        if((long long int)nums[i] + (long long int)nums[j] + ( long long int)nums[k] + ( long long int)nums[l] == target){
                            s.insert({nums[i], nums[j], nums[k], nums[l]});
                        }
                    }
                }
            }
        }
        for(auto it : s){
            output.push_back(it);
        }
        return output;
    }
};


// executed solution 

// class Solution {
// public:
//     vector<vector<int>> fourSum(vector<int>& nums, int target) {
//         sort(nums.begin(), nums.end());
//         set<vector<int>> s;
//         vector<vector<int>> output;
//         for (int i = 0; i < nums.size(); i++){
//             for(int j = i+1; j < nums.size(); j++){
//                 int k = j + 1;
//                 int l = nums.size() - 1;
//                 while (k < l) {
//                     //by writing below 4 statement this way it will not give runtime error
//                     long long int sum = nums[i];
//                     sum += nums[j];
//                     sum += nums[k];
//                     sum += nums[l];
//                     if (sum == target) {
//                         s.insert({nums[i], nums[j], nums[k], nums[l]});
//                         k++;
//                         l--;
//                     } else if (sum < target) {
//                         k++;
//                     } else {
//                         l--;
//                     }
//                 }
//             }
//         }
//         for(auto quadruplets : s)
//             output.push_back(quadruplets);
//         return output;
//     }
// };
