/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* f(vector<int>& p, vector<int>& i, int& id, int l, int r)
    {
        if(l>r)
            return nullptr;
        int pt = l;
        while(i[pt]!=p[id])
            pt++;
        id++;
        TreeNode* t=new TreeNode(i[pt]);
        t->left=f(p,i,id,l,pt-1);
        t->right=f(p,i,id,pt+1,r);
        return t;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int id=0;
        return f(preorder,inorder, id, 0, inorder.size()-1);
    }
    
};


// class Solution {
// public:
//  TreeNode* mergesort(vector<int>& pre,int k, vector<int>& in){
//      if(in.size()==0)
//      return nullptr;
//       TreeNode* root=new TreeNode(pre[k]);
//         vector<int> left,right; int i;
//         for( i=0;i<in.size();i++){
//             if(in[i]==pre[k])
//             break;
//             left.push_back(in[i]);
//         }
//          for(int j=i+1;j<in.size();j++){
//             right.push_back(in[j]);
//         }
//         root->left=mergesort(pre,k+1,left);
//         root->right=mergesort(pre,k+left.size()+1,right);
//         return root; }
//     TreeNode* buildTree(vector<int>& pre, vector<int>& in) {
//         return mergesort(pre,0,in);
//     }
// };
